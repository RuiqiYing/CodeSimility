创建APP：python manage.py startapp appname
同步数据库：
python manage.py makemigrations
python manage.py migrate




1答案:
C B C A B A D B C B

该指针变量可以指向的变量
main
2
-16
2,1
float  a1 = 1.0, a2 = 1.0;
65535,-32768, 1111 1111 1111 1111,1000 0000 0000 0000
return

19.可移植性很强。模块化能力很强。灵活性很高。加载速度和执行速度都很好。可扩展性很强。
20.Break可以用在循环中和switch语句当中。是用来终止当前的循环或跳出switch。
21.使用双引号时，首先要在当前工作目录中查找这个头文件，如果找不到的话就会在内置的include path里面找。使用尖括号时，只会在当前工作目录中查找这个头文件。
22.算法的意义在于提高程序的执行效率，是注重空间的节省，还是注重时间的节省，是写算法时需要考虑的因素。
23.是的, 当然可以。很多程序员使用大括号来规范代码结构，不管是一行还是多行。
24整数类型可以存放从-32768~32767之间的任何数值。但是32768不在这个范围之内。这个时候modifier是我们需要的东西。Long Int数据类型就可以存放这个数。

25
#include<stdio.h>
struct chengji{
 char numble_call[100],name[50];
 int one,two,three,all;
};
void input(struct chengji *bg,int n);
void print(struct chengji *bg,int n);
void overage(struct chengji *bg,int n);
int main(void)
{
 int n;
 scanf("%d",&n);
 struct chengji bg[10000];
 input(bg,n);
 overage(bg,n);
 print(bg,n);
 return 0;
}
void input(struct chengji *bg,int n)
{for(int i = 0;i < n;i++)
 {
  scanf("%s%s%d%d%d",bg[i].numble_call,bg[i].name,&bg[i].one,&bg[i].two,&bg[i].three);
 }
}
void print(struct chengji *bg,int n)
{
 int sum;
 for(int i = 0;i < n;i++)
 {
  bg[i].all = bg[i].one + bg[i].two + bg[i].three;
  bg[n].all = bg[0].all;
  if(bg[i].all >= bg[n].all)
  {
   bg[n].all = bg[i].all;
   sum = i;
  }
 }
 printf("%s %s %d %d %d",bg[sum].numble_call,bg[sum].name,bg[sum].one,bg[sum].two,bg[sum].three);
}
void overage(struct chengji *bg,int n)
{
 double sum[3];
 for(int i = 0;i < n;i++)
 {
  sum[0] += bg[i].one;
 }
 for(int i = 0;i < n;i++)
 {
  sum[1] += bg[i].two;
 }
 for(int i = 0;i < n;i++)
 {
  sum[2] += bg[i].three;
 }
 printf("%.0f %.0f %.0f\n",sum[0] / n,sum[1] / n,sum[2] / n);
}


26.
#include <stdio.h>
int main()
{
	int n,i;
	while(scanf("%d",&n))
	{
		if(n==1)
		{
			printf("n=1\n");
			break;
		}
		printf("n=");
		for(i=2;i<=n;i++)
		{
			while(n!=i)
			{
				if(n%i==0)
				{
					printf("%d*",i);
					n=n/i;
				}
				else
					break;
			}
		}
		printf("%d",n);

	}
	return 0;
}

27

#include<stdio.h>
	struct Date
	{
		int year;
		int month;
		int day;
	};

int main()
{
  struct Date p;
  scanf("%d,%d,%d",&p.year,&p.month,&p.day);
  int a[12]={31,28,31,30,31,30,31,31,30,31,30,31};
  int sum,i;
            sum=p.day;
	        for(i=0;i<p.month-1;i++)
  	        sum+=a[i];
  if(((p.year%4==0&&p.year%100!=0)||p.year%400==0)&&p.month>2)
       printf("该日是在%d年中的第%d天", p.year,sum+1);
  else
   printf("该日是在%d年中的第%d天", p.year,sum);
}

28
#include <stdio.h>
int main()
{
        int n;
        printf("输入人数：\n");
        scanf("%d",&n);


        int a[1000];
        int i,temp;

        int count = 0;
        temp = n;
        for(i = 0;i < n;i++)
        {
                a[i] = i+1;
        }
        i=0;   //重点  i重新赋值0从0开始

        while (n>1)
        {
                if(a[i] != 0)   //不改变第一次报数值，只是让数字3的人为0
                {
                        count++;
                }
                if(count == 3)
                {
                        a[i] = 0;  //让数到3的人为0
                        count = 0;
                        n--;  //人数－1
                }
                i++;
                if(i == temp)
                {
                        i = 0;
                }
        }
        for(i = 0;i < temp;i++)
        {
                if(a[i] != 0)  //此时所有数到3的人都清零了，只有剩下的那一个不为0
                {
                        printf("余下的为：%d号\n",a[i]);
                }


        }


        return 0;
}




2套
